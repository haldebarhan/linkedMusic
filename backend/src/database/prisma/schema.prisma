// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
    PROVIDER
}

enum Status {
    ACTIVATED
    DESACTIVATED
    SUSPENDED
    REMOVED
    CLOSED
}

enum ProfileStatus {
    VERIFIED
    UNVERIFIED
    PENDING_APPROVAL
    CLOSED
}

enum ProfileType {
    STANDARD
    PREMIUM
}

enum FieldType {
    text
    number
    textarea
    select
    checkbox
}

enum FieldInputType {
    TEXT
    TEXTAREA
    NUMBER
    SELECT
    CHECKBOX
    RADIO
    MULTISELECT
    TOGGLE
    RANGE
}

enum AnnouncementStatus {
    PUBLISHED
    DRAFT
    ARCHIVED
    PENDING_APPROVAL
}

enum ConfigType {
    BOOLEAN
    NUMBER
    STRING
    JSON
}

model User {
    id                    Int             @id @default(autoincrement())
    uid                   String          @unique
    email                 String          @unique
    phone                 String          @unique
    firstName             String          @map("first_name")
    lastName              String          @map("last_name")
    role                  Role            @default(USER)
    status                Status          @default(ACTIVATED)
    profileImage          String          @map("profile_image")
    comments              String?
    createdAt             DateTime        @default(now()) @map("created_at")
    updatedAt             DateTime        @updatedAt @map("updated_at")
    Profile               Profile?
    Favorite              Favorite[]
    Message               Message[]
    sentConversations     Conversation[]  @relation("ConversationSender")
    receivedConversations Conversation[]  @relation("ConversationReceiver")
    Topic                 Topic[]
    Comment               Comment[]
    Reply                 Reply[]
    CommentLike           CommentLike[]
    ReplyLike             ReplyLike[]
    CommentReport         CommentReport[]
    ReplyReport           ReplyReport[]
    FavoriteTopic         FavoriteTopic[]
    WatchTopic            WatchTopic[]
    announcements         Announcement[]

    @@map("users")
}

model Profile {
    id          Int           @id @default(autoincrement())
    displayName String?       @map("display_name")
    bio         String?
    location    String?
    userId      Int           @unique @map("user_id")
    status      ProfileStatus @default(UNVERIFIED)
    type        ProfileType   @default(STANDARD)
    user        User          @relation(fields: [userId], references: [id])
    File        File[]
    createdAt   DateTime      @default(now()) @map("created_at")
    updatedAt   DateTime      @updatedAt @map("updated_at")

    @@map("profiles")
}

model File {
    id         Int      @id @default(autoincrement()) @map("id")
    name       String   @map("name")
    fileUrl    String   @map("file_url")
    profileId  Int      @map("profile_id")
    profile    Profile  @relation(fields: [profileId], references: [id])
    uploadedAt DateTime @default(now()) @map("uploaded_at")

    @@map("files")
}

model Category {
    id            Int                    @id @default(autoincrement()) @map("id")
    name          String                 @unique
    slug          String                 @unique
    icon          String?
    createdAt     DateTime               @default(now())
    updatedAt     DateTime               @updatedAt
    Announcement  Announcement[]
    CategoryField CategoryField[]
    services      CategoryServiceType[]
    Announcements AnnouncementCategory[]

    @@map("categories")
}

model ServiceType {
    id            Int                   @id @default(autoincrement()) @map("id")
    name          String
    slug          String                @unique
    description   String?
    groupId       Int?                  @map("group_id")
    createdAt     DateTime              @default(now())
    updatedAt     DateTime              @updatedAt
    parentId      Int?                  @map("parent_id")
    parent        ServiceType?          @relation("ServiceTypeToParent", fields: [parentId], references: [id])
    group         RoleGroup?            @relation("ServiceGroup", fields: [groupId], references: [id])
    Announcements Announcement[]
    children      ServiceType[]         @relation("ServiceTypeToParent")
    categories    CategoryServiceType[]

    @@map("service_types")
}

model CategoryServiceType {
    categoryId    Int @map("category_id")
    serviceTypeId Int @map("service_type_id")

    category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    serviceType ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)

    isDefault Boolean  @default(false)
    order     Int      @default(0)
    createdAt DateTime @default(now())

    @@id([categoryId, serviceTypeId])
    @@index([serviceTypeId])
    @@map("category_service_types")
}

model AnnouncementCategory {
    announcementId Int
    categoryId     Int

    announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    category     Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@id([announcementId, categoryId])
    @@index([categoryId])
    @@map("announcement_categories")
}

model Field {
    id          Int            @id @default(autoincrement()) @map("id")
    key         String         @unique
    label       String
    inputType   FieldInputType
    placeholder String?
    unit        String?
    searchable  Boolean        @default(true)
    filterable  Boolean        @default(true)

    options FieldOption[]

    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    AnnFieldValue AnnFieldValue[]
    CategoryField CategoryField[]

    @@map("fields")
}

model FieldOption {
    id                  Int                   @id @default(autoincrement()) @map("id")
    fieldId             Int
    field               Field                 @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    label               String
    value               String
    order               Int                   @default(0)
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    AnnFieldValueOption AnnFieldValueOption[]

    @@unique([fieldId, value])
    @@map("field_options")
}

model RoleGroup {
    id        Int           @id @default(autoincrement()) @map("id")
    name      String        @unique
    services  ServiceType[] @relation("ServiceGroup")
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@map("role_groups")
}

model Announcement {
    id            Int                @id @default(autoincrement())
    title         String
    description   String
    ownerId       Int
    images        String[]
    serviceTypeId Int
    // NEW: pour requêtes rapides par catégorie
    categoryId    Int? // temporairement nullable, on backfill puis NOT NULL
    price         Int?
    location      String?
    status        AnnouncementStatus @default(PENDING_APPROVAL)
    isPublished   Boolean            @default(false)
    isHighlighted Boolean            @default(false)
    views         Int                @default(0)
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt

    user         User                   @relation(fields: [ownerId], references: [id])
    serviceType  ServiceType            @relation(fields: [serviceTypeId], references: [id])
    category     Category?              @relation(fields: [categoryId], references: [id])
    AnnValues    AnnFieldValue[]
    Favorite     Favorite[]
    Conversation Conversation[]
    CustomField  CustomField[]
    categories   AnnouncementCategory[]

    @@index([serviceTypeId])
    @@index([categoryId])
    @@map("announcements")
}

model CategoryField {
    categoryId Int
    fieldId    Int

    required        Boolean @default(false)
    visibleInFilter Boolean @default(true)
    visibleInForm   Boolean @default(true)
    order           Int     @default(0)

    category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    field    Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    @@id([categoryId, fieldId])
    @@map("category_fields")
}

model AnnFieldValue {
    id             BigInt @id @default(autoincrement())
    announcementId Int
    fieldId        Int

    announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    field        Field        @relation(fields: [fieldId], references: [id], onDelete: Cascade)

    valueText    String?
    valueNumber  Float?
    valueBoolean Boolean?

    options AnnFieldValueOption[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([announcementId, fieldId])
    @@index([fieldId])
    @@index([fieldId, valueBoolean])
    @@index([fieldId, valueNumber])
    @@map("ann_field_values")
}

model AnnFieldValueOption {
    id              BigInt @id @default(autoincrement())
    annFieldValueId BigInt
    optionId        Int

    annFieldValue AnnFieldValue @relation(fields: [annFieldValueId], references: [id], onDelete: Cascade)
    option        FieldOption   @relation(fields: [optionId], references: [id], onDelete: Cascade)

    @@unique([annFieldValueId, optionId])
    @@index([optionId])
    @@map("ann_field_value_options")
}

model Favorite {
    id             Int          @id @default(autoincrement()) @map("id")
    userId         Int
    announcementId Int
    createdAt      DateTime     @default(now())
    user           User         @relation(fields: [userId], references: [id])
    announcement   Announcement @relation(fields: [announcementId], references: [id])

    @@map("favorites")
}

model Conversation {
    id             Int           @id @default(autoincrement()) @map("id")
    senderId       Int
    receiverId     Int
    sender         User          @relation("ConversationSender", fields: [senderId], references: [id])
    receiver       User          @relation("ConversationReceiver", fields: [receiverId], references: [id])
    announcementId Int?
    announcement   Announcement? @relation(fields: [announcementId], references: [id])
    createdAt      DateTime      @default(now())
    Messages       Message[]

    @@unique([senderId, receiverId, announcementId])
    @@map("conversations")
}

model Message {
    id             Int          @id @default(autoincrement()) @map("id")
    conversationId Int
    senderId       Int
    content        String
    readAt         DateTime?
    createdAt      DateTime     @default(now())
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    sender         User         @relation(fields: [senderId], references: [id])

    @@map("messages")
}

model CustomField {
    id            Int          @id @default(autoincrement()) @map("id")
    label         String
    type          FieldType
    value         String
    annoncementId Int
    annoncement   Announcement @relation(fields: [annoncementId], references: [id])
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    @@map("custom_fields")
}

model Styles {
    id        Int      @id @default(autoincrement()) @map("id")
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("styles")
}

model TopicCategory {
    id        Int      @id @default(autoincrement()) @map("id")
    name      String   @unique
    slug      String   @unique
    topics    Topic[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Topic {
    id            Int             @id @default(autoincrement()) @map("id")
    title         String
    content       String
    authorId      Int
    categoryId    Int
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    author        User            @relation(fields: [authorId], references: [id])
    Comment       Comment[]
    category      TopicCategory   @relation(fields: [categoryId], references: [id])
    FavoriteTopic FavoriteTopic[]
    WatchTopic    WatchTopic[]

    @@map("topics")
}

model Comment {
    id        Int             @id @default(autoincrement()) @map("id")
    content   String
    authorId  Int
    topicId   Int
    author    User            @relation(fields: [authorId], references: [id])
    topic     Topic           @relation(fields: [topicId], references: [id])
    replies   Reply[]
    likes     CommentLike[]
    reports   CommentReport[]
    createdAt DateTime        @default(now())

    @@map("comments")
}

model Reply {
    id        Int           @id @default(autoincrement()) @map("id")
    content   String
    authorId  Int
    commentId Int
    author    User          @relation(fields: [authorId], references: [id])
    comment   Comment       @relation(fields: [commentId], references: [id])
    likes     ReplyLike[]
    reports   ReplyReport[]
    createdAt DateTime      @default(now())

    @@map("replies")
}

model CommentLike {
    id        Int      @id @default(autoincrement()) @map("id")
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId Int
    createdAt DateTime @default(now())

    @@unique([userId, commentId])
    @@map("comment_likes")
}

model ReplyLike {
    id        Int      @id @default(autoincrement()) @map("id")
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    reply     Reply    @relation(fields: [replyId], references: [id])
    replyId   Int
    createdAt DateTime @default(now())

    @@unique([userId, replyId])
    @@map("reply_likes")
}

model CommentReport {
    id        Int      @id @default(autoincrement()) @map("id")
    reason    String
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    comment   Comment  @relation(fields: [commentId], references: [id])
    commentId Int
    createdAt DateTime @default(now())

    @@unique([userId, commentId])
    @@map("comment_reports")
}

model ReplyReport {
    id        Int      @id @default(autoincrement()) @map("id")
    reason    String
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    reply     Reply    @relation(fields: [replyId], references: [id])
    replyId   Int
    createdAt DateTime @default(now())

    @@unique([userId, replyId])
    @@map("reply_reports")
}

model FavoriteTopic {
    id        Int      @id @default(autoincrement()) @map("id")
    topicId   Int
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    topic     Topic    @relation(fields: [topicId], references: [id])
    createdAt DateTime @default(now())

    @@unique([userId, topicId])
    @@map("favorite_topics")
}

model WatchTopic {
    id        Int      @id @default(autoincrement()) @map("id")
    topicId   Int
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    topic     Topic    @relation(fields: [topicId], references: [id])
    createdAt DateTime @default(now())

    @@unique([userId, topicId])
    @@map("watch_topics")
}

model AppConfig {
    id        Int      @id @default(autoincrement()) @map("id")
    key       String   @unique
    value     String
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
