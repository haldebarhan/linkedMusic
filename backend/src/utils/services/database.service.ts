import logger from "@/config/logger";
import { PrismaClient } from "@prisma/client";

export class DatabaseService {
    private static prisma: PrismaClient;

    /**
     * Initialise la connexion √† PostgreSQL avec Prisma
     */
    public static async initPostgreSQL() {
        if (!DatabaseService.prisma) {
            DatabaseService.prisma = new PrismaClient();
            logger.info("‚úÖ PostgreSQL connect√© via Prisma");

            // V√©rification de la connexion
            try {
                await DatabaseService.prisma.$connect();
            } catch (error) {
                logger.error("‚ùå Erreur de connexion √† PostgreSQL:", error);
                process.exit(1);
            }
        }
    }

    /**
     * R√©cup√®re l'instance de PrismaClient
     */
    public static getPrismaClient(): PrismaClient {
        if (!DatabaseService.prisma) {
            throw new Error(
                '‚ö†Ô∏è PrismaClient non initialis√©. Appelle `initPostgreSQL()` en premier.'
            );
        }
        return DatabaseService.prisma;
    }

    /**
     * Ferme la connexion √† PostgreSQL et Redis proprement
     */
    public static async disconnect() {
        if (DatabaseService.prisma) {
            await DatabaseService.prisma.$disconnect();
            logger.info('üõë Connexion PostgreSQL ferm√©e');
        }
    }
}

DatabaseService.initPostgreSQL();
export default DatabaseService;
